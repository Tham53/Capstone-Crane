{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _initializerDefineProperty from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\nimport _defineProperty from \"C:\\\\Users\\\\Admin\\\\Documents\\\\Crane\\\\Capstone-Crane\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _PlayerTypesToClass, _class, _descriptor, _temp;\n\nimport SelinaPlayer from './SelinaPlayer';\nimport GraysonPlayer from './GraysonPlayer';\nimport Level from './Level';\nimport Camera from './Camera';\nimport { action, observable, computed } from 'mobx';\nimport GameObjectTypes from '../shared/enum/GameObjectTypes';\nimport history from '../shared/history';\nimport RootStore from './RootStore';\nimport PlayerTypes from '../shared/enum/PlayerTypes';\nvar PlayerTypesToClass = (_PlayerTypesToClass = {}, _defineProperty(_PlayerTypesToClass, PlayerTypes.selina, SelinaPlayer), _defineProperty(_PlayerTypesToClass, PlayerTypes.grayson, GraysonPlayer), _PlayerTypesToClass);\nexport var MS_FRAME_SCALE = 60 / 1000;\nvar GameState = (_class = (_temp = /*#__PURE__*/function () {\n  function GameState() {\n    _classCallCheck(this, GameState);\n\n    _initializerDefineProperty(this, \"gameObjects\", _descriptor, this);\n\n    this.gameObjectsToRemove = [];\n    this.stepGameLoop = this.stepGameLoop.bind(this);\n  }\n\n  _createClass(GameState, [{\n    key: \"addPlayer\",\n    value: function addPlayer(PlayerType) {\n      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n      this.addGameObject(PlayerType, {\n        position: position,\n        playerNumber: this.players.length\n      });\n    }\n  }, {\n    key: \"addGameObject\",\n    value: function addGameObject(GameObjectType, props) {\n      this.gameObjects.push(new GameObjectType(_objectSpread({\n        level: this.level,\n        camera: this.camera,\n        gameState: this\n      }, props)));\n    }\n  }, {\n    key: \"beginGame\",\n    value: function beginGame() {\n      var _this = this;\n\n      this.gameObjects = [];\n      this.gameObjectsToRemove = [];\n      this.level = new Level();\n      this.camera = new Camera({\n        gameState: this\n      }); //Players\n\n      var selectedPlayerTypes = RootStore.playerSelection.selectedPlayerTypes;\n      selectedPlayerTypes.forEach(function (playerType, i) {\n        var x = 350 + 100 * i;\n        var z = 100 + 100 * (i % 2);\n\n        _this.addPlayer(PlayerTypesToClass[playerType], {\n          x: x,\n          y: 0,\n          z: z\n        });\n      }); //Level\n\n      this.level.startingGameObjects.forEach(function (objectDef) {\n        var objectType = objectDef.objectType,\n            props = _objectWithoutProperties(objectDef, [\"objectType\"]);\n\n        _this.addGameObject(objectType, props);\n      });\n      this.startGameLoop();\n    }\n  }, {\n    key: \"startGameLoop\",\n    value: function startGameLoop() {\n      this.lastStepTime = performance.now();\n      this.stepGameLoop();\n    }\n  }, {\n    key: \"stopGameLoop\",\n    value: function stopGameLoop() {\n      cancelAnimationFrame(this._gameLoopRAF);\n    }\n  }, {\n    key: \"stepGameLoop\",\n    value: function stepGameLoop() {\n      // calculate delta time\n      var now = performance.now();\n      var deltaTime = now - this.lastStepTime || 0;\n      this.lastStepTime = now;\n      this.gameObjects.forEach(function (gameObject) {\n        return gameObject.step(deltaTime);\n      });\n      this.camera.step(deltaTime);\n\n      if (this.isGameOver()) {\n        this.onGameOver();\n      }\n\n      this.cleanupRemovedGameObjects();\n      this._gameLoopRAF = requestAnimationFrame(this.stepGameLoop);\n    }\n  }, {\n    key: \"removeGameObject\",\n    value: function removeGameObject(gameObject) {\n      this.gameObjectsToRemove.push(gameObject.id);\n    }\n  }, {\n    key: \"cleanupRemovedGameObjects\",\n    value: function cleanupRemovedGameObjects() {\n      var _this2 = this;\n\n      this.gameObjectsToRemove.forEach(function (id) {\n        var index = _this2.gameObjects.findIndex(function (gameObject) {\n          return gameObject.id === id;\n        });\n\n        _this2.gameObjects.splice(index, 1);\n      });\n      this.gameObjectsToRemove = [];\n    }\n  }, {\n    key: \"isGameOver\",\n    value: function isGameOver() {\n      return this.players.length > 0 && this.players.every(function (p) {\n        return p.isDead;\n      });\n    }\n  }, {\n    key: \"onGameOver\",\n    value: function onGameOver() {\n      if (!this.gameOverTimer) {\n        this.gameOverTimer = setTimeout(function () {\n          history.push('/');\n        }, 2500);\n      }\n    }\n  }, {\n    key: \"getGameObjectsInsideBox\",\n    value: function getGameObjectsInsideBox(box) {\n      return this.gameObjects.filter(function (gameObject) {\n        return gameObject.position.x + gameObject.collisionWidth >= box.x.min && gameObject.position.x <= box.x.max && gameObject.position.y + gameObject.collisionHeight >= box.y.min && gameObject.position.y + gameObject.collisionBottom <= box.y.max && gameObject.position.z >= box.z.min && gameObject.position.z <= box.z.max;\n      });\n    }\n  }, {\n    key: \"players\",\n    get: function get() {\n      return this.gameObjects.filter(function (g) {\n        return g.type === GameObjectTypes.Player;\n      });\n    }\n  }]);\n\n  return GameState;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"gameObjects\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"beginGame\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"beginGame\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"startGameLoop\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"startGameLoop\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"stopGameLoop\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"stopGameLoop\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"stepGameLoop\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"stepGameLoop\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"players\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"players\"), _class.prototype)), _class);\nexport default GameState;","map":{"version":3,"sources":["C:/Users/Admin/Documents/Crane/Capstone-Crane/src/state/GameState.js"],"names":["SelinaPlayer","GraysonPlayer","Level","Camera","action","observable","computed","GameObjectTypes","history","RootStore","PlayerTypes","PlayerTypesToClass","selina","grayson","MS_FRAME_SCALE","GameState","gameObjectsToRemove","stepGameLoop","bind","PlayerType","position","x","y","z","addGameObject","playerNumber","players","length","GameObjectType","props","gameObjects","push","level","camera","gameState","selectedPlayerTypes","playerSelection","forEach","playerType","i","addPlayer","startingGameObjects","objectDef","objectType","startGameLoop","lastStepTime","performance","now","cancelAnimationFrame","_gameLoopRAF","deltaTime","gameObject","step","isGameOver","onGameOver","cleanupRemovedGameObjects","requestAnimationFrame","id","index","findIndex","splice","every","p","isDead","gameOverTimer","setTimeout","box","filter","collisionWidth","min","max","collisionHeight","collisionBottom","g","type","Player"],"mappings":"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","sourcesContent":["import SelinaPlayer from './SelinaPlayer'\r\nimport GraysonPlayer from './GraysonPlayer'\r\nimport Level from './Level'\r\nimport Camera from './Camera'\r\nimport { action, observable, computed } from 'mobx'\r\nimport GameObjectTypes from '../shared/enum/GameObjectTypes'\r\nimport history from '../shared/history'\r\nimport RootStore from './RootStore'\r\nimport PlayerTypes from '../shared/enum/PlayerTypes'\r\n\r\n\r\nconst PlayerTypesToClass = {\r\n  [ PlayerTypes.selina ]: SelinaPlayer,\r\n  [ PlayerTypes.grayson ]: GraysonPlayer,\r\n}\r\n\r\nexport const MS_FRAME_SCALE = 60 / 1000\r\n\r\nclass GameState {\r\n\r\n  @observable\r\n  gameObjects = []\r\n\r\n  gameObjectsToRemove = []\r\n\r\n  constructor() {\r\n    this.stepGameLoop = this.stepGameLoop.bind(this)\r\n  }\r\n\r\n  addPlayer( PlayerType, position = { x: 0, y: 0, z: 0} ) {\r\n    this.addGameObject( PlayerType, {\r\n      position,\r\n      playerNumber: this.players.length,\r\n    })\r\n  }\r\n\r\n  addGameObject( GameObjectType, props ) {\r\n    this.gameObjects.push( new GameObjectType({\r\n      level: this.level,\r\n      camera: this.camera,\r\n      gameState: this,\r\n      ...props\r\n    }))\r\n  }\r\n\r\n  @action\r\n  beginGame() {\r\n    this.gameObjects = []\r\n    this.gameObjectsToRemove = []\r\n    this.level = new Level()\r\n    this.camera = new Camera({ gameState: this })\r\n\r\n    //Players\r\n    const { selectedPlayerTypes } = RootStore.playerSelection\r\n    selectedPlayerTypes.forEach(( playerType, i ) => {\r\n      const x = 350 + 100 * i\r\n      const z = 100 + 100 * (i%2)\r\n      this.addPlayer( PlayerTypesToClass[ playerType ], { x, y: 0, z })\r\n    })\r\n\r\n    //Level\r\n    this.level.startingGameObjects.forEach( objectDef => {\r\n      const {\r\n        objectType,\r\n        ...props\r\n      } = objectDef\r\n\r\n      this.addGameObject( objectType, props )\r\n    })\r\n\r\n    this.startGameLoop()\r\n  }\r\n\r\n  @action\r\n  startGameLoop() {\r\n    this.lastStepTime = performance.now()\r\n    this.stepGameLoop()\r\n  }\r\n\r\n  @action\r\n  stopGameLoop() {\r\n    cancelAnimationFrame(this._gameLoopRAF)\r\n  }\r\n\r\n  @action\r\n  stepGameLoop() {\r\n    // calculate delta time\r\n    const now = performance.now()\r\n    const deltaTime = ( now - this.lastStepTime ) || 0\r\n    this.lastStepTime = now\r\n\r\n    this.gameObjects.forEach( gameObject => gameObject.step( deltaTime ))\r\n    \r\n    this.camera.step( deltaTime )\r\n\r\n    if ( this.isGameOver()) {\r\n      this.onGameOver()\r\n    }\r\n\r\n    this.cleanupRemovedGameObjects()\r\n\r\n    this._gameLoopRAF = requestAnimationFrame(this.stepGameLoop)\r\n  }\r\n\r\n  removeGameObject( gameObject ) {\r\n    this.gameObjectsToRemove.push( gameObject.id )\r\n  }\r\n\r\n  cleanupRemovedGameObjects() {\r\n    this.gameObjectsToRemove.forEach( id => {\r\n      const index = this.gameObjects.findIndex( gameObject => gameObject.id === id )\r\n      this.gameObjects.splice(index, 1)\r\n    })\r\n    this.gameObjectsToRemove = []\r\n  }\r\n\r\n  @computed\r\n  get players() {\r\n    return this.gameObjects.filter( g => g.type === GameObjectTypes.Player )\r\n  }\r\n\r\n  isGameOver() {\r\n    return this.players.length > 0 && this.players.every( p => p.isDead )\r\n  }\r\n\r\n  onGameOver() {\r\n    if ( !this.gameOverTimer ) {\r\n      this.gameOverTimer = setTimeout(() => {\r\n        history.push('/')\r\n      }, 2500)\r\n    }\r\n  }\r\n\r\n  getGameObjectsInsideBox( box ) { \r\n    return this.gameObjects.filter( gameObject => {\r\n      \r\n      return (\r\n        gameObject.position.x + gameObject.collisionWidth >= box.x.min &&\r\n        gameObject.position.x <= box.x.max &&\r\n        gameObject.position.y + gameObject.collisionHeight >= box.y.min &&\r\n        gameObject.position.y + gameObject.collisionBottom <= box.y.max &&\r\n        gameObject.position.z >= box.z.min &&\r\n        gameObject.position.z <= box.z.max\r\n      )\r\n    })\r\n  }\r\n}\r\n\r\nexport default GameState\r\n"]},"metadata":{},"sourceType":"module"}